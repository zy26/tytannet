<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="T0" xml:space="preserve">
    <value>double-clicking on the text inside DebugView tool, will immediately jump to the source code, close to the line where the log entry was created.</value>
  </data>
  <data name="T1" xml:space="preserve">
    <value>DebugView requires the log entries to have a special format to perform the jump quickly.</value>
  </data>
  <data name="T10" xml:space="preserve">
    <value>you can quickly insert a Guid attribute to a class or just GUID string (depending on current cursor location) by clicking 'Insert Guid' inside Refactor menu.</value>
  </data>
  <data name="T11" xml:space="preserve">
    <value>from DebugView you can quickly navigate to source-code by just double-clicking the log entry.</value>
  </data>
  <data name="T12" xml:space="preserve">
    <value>Registry Editor can export data in the same format as a standard Windows' registry editor (regedit.exe).</value>
  </data>
  <data name="T13" xml:space="preserve">
    <value>Registry Editor enhances the navigation over system registry.</value>
  </data>
  <data name="T14" xml:space="preserve">
    <value>by editing Environment Variables inside Visual Studio you don't need to restart it each time you want to change parameters for your tests.</value>
  </data>
  <data name="T15" xml:space="preserve">
    <value>you can safe a lot of time just by using TytanNET coding enhancements and removing boring coding from your life!</value>
  </data>
  <data name="T16" xml:space="preserve">
    <value>I am always keen to listen your suggestions about TytanNET and how to improve it.</value>
  </data>
  <data name="T2" xml:space="preserve">
    <value>DebugView can at run-time filter incoming messages.</value>
  </data>
  <data name="T3" xml:space="preserve">
    <value>there are few log-entries formats automatically detected by DebugView tool.</value>
  </data>
  <data name="T4" xml:space="preserve">
    <value>properties about given log entries of DebugView tool can be seen in Properties window, as long as given entry is selected.</value>
  </data>
  <data name="T5" xml:space="preserve">
    <value>TytanNET is designed to support: C#, VB.NET and Managed C++.</value>
  </data>
  <data name="T6" xml:space="preserve">
    <value>during debugging of your applications you can quickly preview some data by using visualizers:
 - XML documents,
 - images,
 - colors,
 - COM objects</value>
  </data>
  <data name="T7" xml:space="preserve">
    <value>three tool windows are designed to enhance and speed-up your work:
 - DebugView - log capture and code navigation,
 - RegistryView - editor of system registry,
 - EnvironmentVariables - editor of environment variables</value>
  </data>
  <data name="T8" xml:space="preserve">
    <value>TytanNET allows insertion and edition of database connection strings using standard full-featured dialog box.</value>
  </data>
  <data name="T9" xml:space="preserve">
    <value>to edit connection string is enough to select a text in any text editor window and click 'Refactor-&gt;Quick Insert-&gt;Insert Connection String'.</value>
  </data>
  <data name="Tips_First" xml:space="preserve">
    <value>0</value>
  </data>
  <data name="Tips_Last" xml:space="preserve">
    <value>16</value>
  </data>
</root>